{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fullstack\\\\Desktop\\\\TeamWorks\\\\WAKAUT\\\\next\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Container, Form, FormSelect } from \"react-bootstrap\";\nimport List from \"../components/list\";\nimport { useEffect, useState } from \"react\";\nimport { AiTwotoneHeart } from \"react-icons/ai\";\nimport PlaceModal from \"./place_modal\";\nimport img from '../assets/workaut.png';\nimport mapicon from '../assets/map-icon.png';\nimport getLayout from \"../components/layouts/getLayout\";\nimport axios from \"axios\";\nimport { XMLParser } from 'fast-xml-parser';\nimport Modal from \"../components/modal\";\nimport { Datas } from \"../pages/feutils\";\nimport dynamic from 'next/dynamic';\nconst Map = dynamic(() => import(\"react-kakao-maps-sdk\").then(module => module.Map), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-kakao-maps-sdk\")],\n    modules: [\"index.js -> \" + \"react-kakao-maps-sdk\"]\n  }\n});\nconst MapMarker = dynamic(() => import(\"react-kakao-maps-sdk\").then(module => module.MapMarker), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-kakao-maps-sdk\")],\n    modules: [\"index.js -> \" + \"react-kakao-maps-sdk\"]\n  }\n});\nexport async function getServerSideProps(ctx) {\n  let items = await Datas('/main?srch=태권도');\n  return {\n    props: {\n      items: items\n    }\n  };\n}\nexport default function Index({\n  items\n}) {\n  const {\n    0: lgShow,\n    1: setLgShow\n  } = useState(false);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  let des = '#에어로빅 #줌바 #조깅';\n  const {\n    0: selectedSigun,\n    1: setSelectedSigun\n  } = useState(\"\");\n  const {\n    0: selectedFacility,\n    1: setSelectedFacility\n  } = useState(\"\");\n  const {\n    0: searchText,\n    1: setSearchText\n  } = useState(\"\");\n  const {\n    0: searchResults,\n    1: setSearchResults\n  } = useState(items); // 검색결과 저장 state\n\n  const {\n    0: selectedPlace,\n    1: setSelectedPlace\n  } = useState(null); // 마커 클릭시 모달 state\n\n  const {\n    0: searchCount,\n    1: setSearchCount\n  } = useState(items.length); // 총 몇개의 시설이 조회된건지 저장하는 state\n  // 시군명 선택 시 시설구분명 셀렉트 태그에 표시할 options 배열 반환\n\n  function getFacilityOptions(sigun) {\n    const facilities = items.filter(item => item.SIGUN_NM === sigun);\n    const facilityNames = [...new Set(facilities.map(item => item.FACLT_DIV_NM))];\n    return facilityNames.map(name => __jsx(\"option\", {\n      key: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 44\n      }\n    }, name));\n  } // 시군명 선택 시 시설구분명 셀렉트 태그 업데이트 및 지도 중심좌표 설정\n\n\n  function handleSigunChange(e) {\n    setSelectedSigun(e.target.value);\n    setSelectedFacility(\"\");\n    setSearchText(\"\"); // 시설 데이터 중 첫번째 시설의 위도와 경도 정보 가져오기\n\n    const firstFacility = items.find(item => item.SIGUN_NM === e.target.value);\n\n    if (firstFacility) {\n      const lat = parseFloat(firstFacility.REFINE_WGS84_LAT);\n      const lng = parseFloat(firstFacility.REFINE_WGS84_LOGT); // 위도와 경도 정보로 중심 좌표 설정\n\n      setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        center: {\n          lat,\n          lng\n        }\n      }));\n    } // 검색 결과 초기화\n\n\n    setSearchResults([]);\n    setSearchCount(0);\n  } // 시설구분명 선택 시 state 업데이트\n\n\n  function handleFacilityChange(e) {\n    setSelectedFacility(e.target.value);\n  } // 검색어 입력 시 state 업데이트\n\n\n  function handleSearchTextChange(e) {\n    setSearchText(e.target.value); // 검색 결과 초기화\n\n    setSearchResults([]);\n    setSearchCount(0);\n  }\n\n  function handleSearchButtonClick() {\n    // items 객체 복사\n    let results = [...items]; // 선택된 시군명이 있다면, 해당 시군명에 해당하는 시설들만 필터링\n\n    if (selectedSigun) {\n      results = results.filter(item => item.SIGUN_NM === selectedSigun);\n    } // 선택된 시설구분명이 있다면, 해당 시설구분명에 해당하는 시설들만 필터링\n\n\n    if (selectedFacility) {\n      results = results.filter(item => item.FACLT_DIV_NM === selectedFacility);\n    } // 검색어가 있다면, 시설명이 해당 검색어를 포함하는 시설들만 필터링\n\n\n    if (searchText) {\n      results = results.filter(item => item.FACLT_NM.includes(searchText));\n    }\n\n    if (results.length === 0) setShow(true);else {\n      setSearchResults(results);\n      setSearchCount(results.length);\n    }\n  }\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    center: {\n      lat: 37.28892227326957,\n      lng: 127.05363481102465\n    },\n    errMsg: null,\n    isLoading: true\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(position => {\n        setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          center: {\n            lat: position.coords.latitude,\n            // 위도\n            lng: position.coords.longitude // 경도\n\n          },\n          isLoading: false\n        }));\n      }, err => {\n        setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        errMsg: \"geolocation을 사용할수 없어요..\",\n        isLoading: false\n      }));\n    }\n  }, []);\n  return __jsx(Container, {\n    className: \"d-flex mt-4 mb-4 index\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"left col-6 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, \"\\uCD1D \", searchCount, \"\\uAC74\"), searchResults.map(item => __jsx(List, {\n    key: item.FACLT_NM,\n    title: item.FACLT_NM,\n    malcnt: __jsx(AiTwotoneHeart, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 33\n      }\n    }),\n    note: item.REFINE_ROADNM_ADDR,\n    col: \"bg-secondary\",\n    textClick: () => {\n      setSelectedPlace(item);\n      setLgShow(true);\n      const lat = parseFloat(item.REFINE_WGS84_LAT);\n      const lng = parseFloat(item.REFINE_WGS84_LOGT);\n      setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        center: {\n          lat,\n          lng\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }))), __jsx(\"div\", {\n    className: \"right col-6 ms-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, __jsx(Form, {\n    className: \"d-flex mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, __jsx(FormSelect, {\n    value: selectedSigun,\n    onChange: handleSigunChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }\n  }, \"\\uC2DC\\uAD70\"), [...new Set(items.map(item => item.SIGUN_NM))].map(sigun => __jsx(\"option\", {\n    key: sigun,\n    value: sigun,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 29\n    }\n  }, sigun))), selectedSigun ? __jsx(FormSelect, {\n    value: selectedFacility,\n    onChange: handleFacilityChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 25\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 29\n    }\n  }, \"\\uC2DC\\uC124\\uAD6C\\uBD84\\uBA85\"), getFacilityOptions(selectedSigun)) : __jsx(FormSelect, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, __jsx(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }\n  }, \"\\uC2DC\\uC124\\uAD6C\\uBD84\\uBA85\")), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"\\uC5B4\\uB514\\uC11C \\uC6B4\\uB3D9\\uD560\\uAE4C\\uC694?\",\n    value: searchText,\n    onChange: handleSearchTextChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 21\n    }\n  }), __jsx(Button, {\n    onClick: handleSearchButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }, \"Search\")), __jsx(Map, {\n    center: state.center,\n    style: {\n      width: \"100%\",\n      height: \"800px\"\n    },\n    level: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, (!state.isLoading ? searchResults : []).map(item => __jsx(MapMarker, {\n    key: item.FACLT_NM,\n    position: {\n      lat: item.REFINE_WGS84_LAT,\n      lng: item.REFINE_WGS84_LOGT\n    },\n    onClick: () => {\n      setSelectedPlace(item);\n      setLgShow(true);\n    },\n    image: {\n      src: `${mapicon}`,\n      size: {\n        width: 30,\n        height: 30\n      },\n      options: {\n        offset: {\n          x: 27,\n          y: 69\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 21\n    }\n  })))), __jsx(PlaceModal, {\n    size: \"lg\",\n    lgShow: lgShow,\n    setLgShow: setLgShow,\n    score: 3,\n    title: selectedPlace ? selectedPlace.FACLT_NM : \"\",\n    addr: selectedPlace ? selectedPlace.REFINE_ROADNM_ADDR : \"\",\n    contact: selectedPlace ? selectedPlace.CONTCT_NO : \"\",\n    des: des,\n    img: img,\n    lat: selectedPlace ? selectedPlace.REFINE_WGS84_LAT : null,\n    lng: selectedPlace ? selectedPlace.REFINE_WGS84_LOGT : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }), __jsx(Modal, {\n    class: \"searchModal\",\n    size: \"sm\",\n    lgShow: show,\n    setLgShow: setShow,\n    children: \"\\uD574\\uB2F9\\uD558\\uB294 \\uC2DC\\uC124\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }));\n}\ngetLayout(Index, {\n  title: '주변에서 운동해요! WAKAUT!',\n  description: '신개념 운동 플랫폼 워크아웃!'\n});","map":{"version":3,"sources":["C:/Users/fullstack/Desktop/TeamWorks/WAKAUT/next/pages/index.js"],"names":["Button","Container","Form","FormSelect","List","useEffect","useState","AiTwotoneHeart","PlaceModal","img","mapicon","getLayout","axios","XMLParser","Modal","Datas","dynamic","Map","then","module","ssr","MapMarker","getServerSideProps","ctx","items","props","Index","lgShow","setLgShow","show","setShow","des","selectedSigun","setSelectedSigun","selectedFacility","setSelectedFacility","searchText","setSearchText","searchResults","setSearchResults","selectedPlace","setSelectedPlace","searchCount","setSearchCount","length","getFacilityOptions","sigun","facilities","filter","item","SIGUN_NM","facilityNames","Set","map","FACLT_DIV_NM","name","handleSigunChange","e","target","value","firstFacility","find","lat","parseFloat","REFINE_WGS84_LAT","lng","REFINE_WGS84_LOGT","setState","prev","center","handleFacilityChange","handleSearchTextChange","handleSearchButtonClick","results","FACLT_NM","includes","state","errMsg","isLoading","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","err","message","REFINE_ROADNM_ADDR","width","height","src","size","options","offset","x","y","CONTCT_NO","title","description"],"mappings":"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","sourcesContent":["import {Button, Container, Form, FormSelect} from \"react-bootstrap\";\r\nimport List from \"../components/list\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { AiTwotoneHeart } from \"react-icons/ai\";\r\nimport PlaceModal from \"./place_modal\";\r\nimport img from '../assets/workaut.png';\r\nimport mapicon from '../assets/map-icon.png';\r\nimport getLayout from \"../components/layouts/getLayout\";\r\nimport axios from \"axios\";\r\nimport { XMLParser } from 'fast-xml-parser';\r\nimport Modal from \"../components/modal\";\r\nimport {Datas} from \"../pages/feutils\";\r\n\r\nimport dynamic from 'next/dynamic';\r\nconst Map = dynamic(() => import(\"react-kakao-maps-sdk\").then((module) => module.Map), {\r\n    ssr: false\r\n});\r\nconst MapMarker = dynamic(() => import(\"react-kakao-maps-sdk\").then((module) => module.MapMarker), {\r\n    ssr: false\r\n});\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    let items = await Datas('/main?srch=태권도');\r\n    return {props: {items: items}}\r\n}\r\n\r\nexport default function Index({items}) {\r\n    const [lgShow, setLgShow] = useState(false);\r\n    const [show, setShow] = useState(false);\r\n\r\n    let des = '#에어로빅 #줌바 #조깅';\r\n\r\n    const [selectedSigun, setSelectedSigun] = useState(\"\");\r\n    const [selectedFacility, setSelectedFacility] = useState(\"\");\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState(items);  // 검색결과 저장 state\r\n    const [selectedPlace, setSelectedPlace] = useState(null);   // 마커 클릭시 모달 state\r\n    const [searchCount, setSearchCount] = useState(items.length);  // 총 몇개의 시설이 조회된건지 저장하는 state\r\n\r\n\r\n    // 시군명 선택 시 시설구분명 셀렉트 태그에 표시할 options 배열 반환\r\n    function getFacilityOptions(sigun) {\r\n        const facilities = items.filter((item) => item.SIGUN_NM === sigun);\r\n        const facilityNames = [...new Set(facilities.map((item) => item.FACLT_DIV_NM))];\r\n        return facilityNames.map((name) => <option key={name}>{name}</option>);\r\n    }\r\n\r\n    // 시군명 선택 시 시설구분명 셀렉트 태그 업데이트 및 지도 중심좌표 설정\r\n    function handleSigunChange(e) {\r\n        setSelectedSigun(e.target.value);\r\n        setSelectedFacility(\"\");\r\n        setSearchText(\"\");\r\n\r\n        // 시설 데이터 중 첫번째 시설의 위도와 경도 정보 가져오기\r\n        const firstFacility = items.find((item) => item.SIGUN_NM === e.target.value);\r\n        if (firstFacility) {\r\n            const lat = parseFloat(firstFacility.REFINE_WGS84_LAT);\r\n            const lng = parseFloat(firstFacility.REFINE_WGS84_LOGT);\r\n            // 위도와 경도 정보로 중심 좌표 설정\r\n            setState((prev) => ({\r\n                ...prev,\r\n                center: { lat, lng },\r\n            }));\r\n        }\r\n        // 검색 결과 초기화\r\n        setSearchResults([]);\r\n        setSearchCount(0);\r\n    }\r\n\r\n    // 시설구분명 선택 시 state 업데이트\r\n    function handleFacilityChange(e) {\r\n        setSelectedFacility(e.target.value);\r\n    }\r\n\r\n    // 검색어 입력 시 state 업데이트\r\n    function handleSearchTextChange(e) {\r\n        setSearchText(e.target.value);\r\n        // 검색 결과 초기화\r\n        setSearchResults([]);\r\n        setSearchCount(0);\r\n    }\r\n\r\n    function handleSearchButtonClick() {\r\n        // items 객체 복사\r\n        let results = [...items];\r\n\r\n        // 선택된 시군명이 있다면, 해당 시군명에 해당하는 시설들만 필터링\r\n        if (selectedSigun) {\r\n            results = results.filter((item) => item.SIGUN_NM === selectedSigun);\r\n        }\r\n\r\n        // 선택된 시설구분명이 있다면, 해당 시설구분명에 해당하는 시설들만 필터링\r\n        if (selectedFacility) {\r\n            results = results.filter((item) => item.FACLT_DIV_NM === selectedFacility);\r\n        }\r\n        // 검색어가 있다면, 시설명이 해당 검색어를 포함하는 시설들만 필터링\r\n        if (searchText) {\r\n            results = results.filter((item) => item.FACLT_NM.includes(searchText));\r\n        }\r\n        if (results.length === 0) setShow(true)\r\n        else{\r\n        setSearchResults(results);\r\n        setSearchCount(results.length);\r\n        }\r\n    }\r\n\r\n\r\n    const [state, setState] = useState({\r\n        center: {\r\n            lat: 37.28892227326957,\r\n            lng: 127.05363481102465,\r\n        },\r\n        errMsg: null,\r\n        isLoading: true,\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            // GeoLocation을 이용해서 접속 위치를 얻어옵니다\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setState((prev) => ({\r\n                        ...prev,\r\n                        center: {\r\n                            lat: position.coords.latitude, // 위도\r\n                            lng: position.coords.longitude, // 경도\r\n                        },\r\n                        isLoading: false,\r\n                    }))\r\n                },\r\n                (err) => {\r\n                    setState((prev) => ({\r\n                        ...prev,\r\n                        errMsg: err.message,\r\n                        isLoading: false,\r\n                    }))\r\n                }\r\n            )\r\n        } else {\r\n            // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\r\n            setState((prev) => ({\r\n                ...prev,\r\n                errMsg: \"geolocation을 사용할수 없어요..\",\r\n                isLoading: false,\r\n            }))\r\n        }\r\n    }, [])\r\n\r\n\r\n    return(\r\n        <Container className=\"d-flex mt-4 mb-4 index\">\r\n            <div className=\"left col-6 \">\r\n                <p>총 {searchCount}건</p>\r\n                {searchResults.map((item) => (\r\n                    <List\r\n                        key={item.FACLT_NM}\r\n                        title={item.FACLT_NM}\r\n                        malcnt={<AiTwotoneHeart />}\r\n                        note={item.REFINE_ROADNM_ADDR}\r\n                        col=\"bg-secondary\"\r\n                        textClick={() => {\r\n                            setSelectedPlace(item);\r\n                            setLgShow(true);\r\n                            const lat = parseFloat(item.REFINE_WGS84_LAT);\r\n                            const lng = parseFloat(item.REFINE_WGS84_LOGT);\r\n                            setState((prev) => ({\r\n                                ...prev,\r\n                                center: { lat, lng },\r\n                            }));\r\n                        }}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"right col-6 ms-4\">\r\n                <Form className=\"d-flex mb-2\">\r\n                    <FormSelect value={selectedSigun} onChange={handleSigunChange}>\r\n                        <option value=\"\">시군</option>\r\n                        {/* API에서 불러오는 데이터중 시군 데이터로 새로운 배열을 생성하되 중복을 제거함 */}\r\n                        {[...new Set(items.map((item) => item.SIGUN_NM))].map((sigun) => (\r\n                            <option key={sigun} value={sigun}>{sigun}</option>\r\n                        ))}\r\n                    </FormSelect>\r\n                    {selectedSigun ? (\r\n                        <FormSelect value={selectedFacility} onChange={handleFacilityChange}>\r\n                            <option value=\"\">시설구분명</option>\r\n                            {getFacilityOptions(selectedSigun)}\r\n                        </FormSelect>\r\n                    ) : (\r\n                        <FormSelect >\r\n                            <option>시설구분명</option>\r\n                        </FormSelect>\r\n                    )}\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"어디서 운동할까요?\"\r\n                        value={searchText}\r\n                        onChange={handleSearchTextChange}\r\n                    />\r\n                    <Button onClick={handleSearchButtonClick}>Search</Button>\r\n                </Form>\r\n\r\n            <Map center={state.center} style={{ width: \"100%\", height: \"800px\" }}  level={3}>\r\n                {(!state.isLoading ? searchResults : []).map((item) => (\r\n                    <MapMarker\r\n                        key={item.FACLT_NM}\r\n                        position={{ lat: item.REFINE_WGS84_LAT, lng: item.REFINE_WGS84_LOGT }}\r\n                        onClick={() => {\r\n                            setSelectedPlace(item);\r\n                            setLgShow(true);\r\n                        }}\r\n                        image={{\r\n                            src: `${mapicon}`,\r\n                            size: {width: 30, height: 30,},\r\n                            options: {\r\n                             offset: {x: 27, y: 69,},\r\n                        },\r\n                        }}\r\n                    />\r\n                ))}\r\n            </Map>\r\n            </div>\r\n            <PlaceModal\r\n                size=\"lg\"\r\n                lgShow={lgShow}\r\n                setLgShow={setLgShow}\r\n                score={3}\r\n                title={selectedPlace ? selectedPlace.FACLT_NM : \"\"}\r\n                addr={selectedPlace ? selectedPlace.REFINE_ROADNM_ADDR : \"\"}\r\n                contact={selectedPlace ? selectedPlace.CONTCT_NO : \"\"}\r\n                des={des}\r\n                img={img}\r\n                lat={selectedPlace ? selectedPlace.REFINE_WGS84_LAT : null}\r\n                lng={selectedPlace ? selectedPlace.REFINE_WGS84_LOGT : null}\r\n            />\r\n            <Modal class=\"searchModal\" size=\"sm\" lgShow={show} setLgShow={setShow} children=\"해당하는 시설이 없습니다.\"/>\r\n        </Container>\r\n    )\r\n}\r\n\r\ngetLayout(Index,{title:'주변에서 운동해요! WAKAUT!',description:'신개념 운동 플랫폼 워크아웃!'})\r\n"]},"metadata":{},"sourceType":"module"}