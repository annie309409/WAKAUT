{"ast":null,"code":"\"use strict\";\n\nvar _MariaDB = _interopRequireDefault(require(\"./MariaDB\"));\n\nvar _SQLs = _interopRequireDefault(require(\"./SQLs\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Member {\n  // 즐겨찾기 추가\n  async insertFvr(userid, facility, region, contact) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid, facility, region, contact];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.insertFvr, params);\n      await conn.commit();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 즐겨찾기 삭제\n\n\n  async deleteFvr(fid) {\n    let conn = null;\n    let rowData = null;\n    let params = [fid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.deleteFvr, params);\n      await conn.commit();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 즐겨찾기 목록 출력\n\n\n  async selectFvr(userid) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.selectFvr, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 회원탈퇴 시 게시글 삭제\n\n\n  async leaveDelete(writer) {\n    let conn = null;\n    let rowData = null;\n    let params = [writer];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.leaveDelet, params);\n      await conn.commit();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 회원탈퇴\n\n\n  async leave(uid) {\n    let conn = null;\n    let rowData = null;\n    let params = [uid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.beginTransaction(); // 해당 회원이 작성한 모든 댓글 삭제\n\n      await conn.query('DELETE FROM comments WHERE userid = ?', [uid]); // 해당 회원이 작성한 모든 게시글 삭제\n\n      await conn.query('DELETE FROM boards WHERE writer = ?', [uid]);\n      await conn.query(_SQLs.default.member.leave, params);\n      await conn.commit();\n    } catch (e) {\n      await conn.rollback();\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // myinfo 출력\n\n\n  async selectMif(uid) {\n    let conn = null;\n    let rowData = null;\n    let params = [uid, uid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.selectMif, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // mypage 남긴글 수\n\n\n  async history(writer) {\n    let conn = null;\n    let rowData = null;\n    let params = [writer];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.history, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData.map(row => {\n      return {\n        cnt: row.cnt.toString()\n      };\n    });\n  } // modify 출력\n\n\n  async selectMdf(uid) {\n    let conn = null;\n    let rowData = null;\n    let params = [uid, uid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.selectMdf, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 회원정보 수정\n\n\n  async updateInfo(uid, userid, passwd, name, email, phone_number, birth_date, gender, agree_to_privacy_policy, agree_to_advertising_info) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid, passwd, name, email, phone_number, birth_date, gender, agree_to_privacy_policy, agree_to_advertising_info, uid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.updateInfo, params);\n      await conn.commit();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 회원가입\n\n\n  async join(userid, passwd, name, email, phone_number, birth_date, gender, agree_to_privacy_policy, agree_to_advertising_info) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid, passwd, name, email, phone_number, birth_date, gender, agree_to_privacy_policy, agree_to_advertising_info];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.join, params);\n      await conn.commit();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 아이디 중복체크\n\n\n  async isOverlapUid(userid) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.isOverlapUid, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 이메일 중복체크\n\n\n  async isOverlapEmail(userid) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.isOverlapEmail, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } //회원 가입여부 확인\n\n\n  async idCheck(userid) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.idcheck, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } //소셜회원 가입 \n\n\n  async socialJoin(userid, name, email) {\n    let conn = null;\n    let rowData = 1;\n    let params = [userid, name, email];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.socialJoin, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } //스코어 추가 \n\n\n  async setScore(facility, score) {\n    let conn = null;\n    let rowData = 1;\n    let params = [facility, score];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.setScore, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  }\n\n}\n\nmodule.exports = Member;","map":{"version":3,"sources":["C:/Users/pc/Desktop/학언/WAKAUT/WAKAUT/next/models/Member.js"],"names":["Member","insertFvr","userid","facility","region","contact","conn","rowData","params","mariadb","makeConn","query","SQL","member","commit","e","console","log","closeConn","deleteFvr","fid","selectFvr","leaveDelete","writer","leaveDelet","leave","uid","beginTransaction","rollback","selectMif","history","map","row","cnt","toString","selectMdf","updateInfo","passwd","name","email","phone_number","birth_date","gender","agree_to_privacy_policy","agree_to_advertising_info","join","isOverlapUid","isOverlapEmail","idCheck","idcheck","socialJoin","setScore","score","module","exports"],"mappings":"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","sourcesContent":["import mariadb from './MariaDB';\r\nimport SQL from './SQLs';\r\n\r\nclass Member {\r\n    // 즐겨찾기 추가\r\n    async insertFvr(userid, facility, region, contact) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [userid, facility, region, contact];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            await conn.query(SQL.member.insertFvr, params);\r\n            await conn.commit();\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    // 즐겨찾기 삭제\r\n    async deleteFvr(fid) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [fid];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            await conn.query(SQL.member.deleteFvr, params);\r\n            await conn.commit();\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    // 즐겨찾기 목록 출력\r\n    async selectFvr(userid) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [userid];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            rowData = await conn.query(SQL.member.selectFvr, params);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    // 회원탈퇴 시 게시글 삭제\r\n    async leaveDelete(writer) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [writer]\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            await conn.query(SQL.member.leaveDelet, params);\r\n            await conn.commit();\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    // 회원탈퇴\r\n    async leave(uid) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [uid]\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            await conn.beginTransaction();\r\n            // 해당 회원이 작성한 모든 댓글 삭제\r\n            await conn.query('DELETE FROM comments WHERE userid = ?', [uid]);\r\n            // 해당 회원이 작성한 모든 게시글 삭제\r\n            await conn.query('DELETE FROM boards WHERE writer = ?', [uid]);\r\n            await conn.query(SQL.member.leave, params);\r\n            await conn.commit();\r\n        } catch (e) {\r\n            await conn.rollback();\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    // myinfo 출력\r\n    async selectMif(uid) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [uid, uid];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            rowData = await conn.query(SQL.member.selectMif, params);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    // mypage 남긴글 수\r\n    async history(writer) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [writer];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            rowData = await conn.query(SQL.member.history, params);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData.map(row => {\r\n            return {\r\n                cnt: row.cnt.toString()\r\n            }\r\n        })\r\n    }\r\n\r\n    // modify 출력\r\n    async selectMdf(uid) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [uid, uid];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            rowData = await conn.query(SQL.member.selectMdf, params);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    // 회원정보 수정\r\n    async updateInfo(uid, userid, passwd, name, email, phone_number, birth_date, gender,\r\n                     agree_to_privacy_policy, agree_to_advertising_info)\r\n    {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [userid, passwd, name, email, phone_number, birth_date, gender,\r\n            agree_to_privacy_policy, agree_to_advertising_info, uid];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            await conn.query(SQL.member.updateInfo, params);\r\n            await conn.commit();\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    // 회원가입\r\n    async join(\r\n        userid,\r\n        passwd,\r\n        name,\r\n        email,\r\n        phone_number,\r\n        birth_date,\r\n        gender,\r\n        agree_to_privacy_policy,\r\n        agree_to_advertising_info)\r\n    {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [\r\n            userid,\r\n            passwd,\r\n            name,\r\n            email,\r\n            phone_number,\r\n            birth_date,\r\n            gender,\r\n            agree_to_privacy_policy,\r\n            agree_to_advertising_info];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            await conn.query(SQL.member.join, params);\r\n            await conn.commit();\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    // 아이디 중복체크\r\n    async isOverlapUid(userid) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [userid];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            rowData = await conn.query(SQL.member.isOverlapUid, params);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    // 이메일 중복체크\r\n    async isOverlapEmail(userid) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [userid];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            rowData = await conn.query(SQL.member.isOverlapEmail, params);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    //회원 가입여부 확인\r\n    async idCheck(userid) {\r\n        let conn = null;\r\n        let rowData = null;\r\n        let params = [userid];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            rowData = await conn.query(SQL.member.idcheck, params);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    //소셜회원 가입 \r\n    async socialJoin(userid,name,email) {\r\n        let conn = null;\r\n        let rowData = 1;\r\n        let params = [userid,name,email];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            await conn.query(SQL.member.socialJoin, params);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n    //스코어 추가 \r\n    async setScore(facility,score) {\r\n        let conn = null;\r\n        let rowData = 1;\r\n        let params = [facility,score];\r\n        try {\r\n            conn = await mariadb.makeConn();\r\n            await conn.query(SQL.member.setScore, params);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            await mariadb.closeConn();\r\n        }\r\n        return rowData;\r\n    }\r\n\r\n}\r\nmodule.exports = Member;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script"}