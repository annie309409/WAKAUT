{"ast":null,"code":"\"use strict\";\n\nvar _MariaDB = _interopRequireDefault(require(\"./MariaDB\"));\n\nvar _SQLs = _interopRequireDefault(require(\"./SQLs\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Member {\n  // 즐겨찾기 추가\n  async insertFvr(userid, facility, region, contact) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid, facility, region, contact];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.insertFvr, params);\n      await conn.commit();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 즐겨찾기 삭제\n\n\n  async deleteFvr(fid) {\n    let conn = null;\n    let rowData = null;\n    let params = [fid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.deleteFvr, params);\n      await conn.commit();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 즐겨찾기 목록 출력\n\n\n  async selectFvr(userid) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.selectFvr, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 회원탈퇴 시 게시글 삭제\n\n\n  async leaveDelete(writer) {\n    let conn = null;\n    let rowData = null;\n    let params = [writer];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.leaveDelet, params);\n      await conn.commit();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 회원탈퇴\n\n\n  async leave(uid) {\n    let conn = null;\n    let rowData = null;\n    let params = [uid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.beginTransaction(); // 해당 회원이 작성한 모든 댓글 삭제\n\n      await conn.query('DELETE FROM comments WHERE userid = ?', [uid]); // 해당 회원이 작성한 모든 게시글 삭제\n\n      await conn.query('DELETE FROM boards WHERE writer = ?', [uid]);\n      await conn.query(_SQLs.default.member.leave, params);\n      await conn.commit();\n    } catch (e) {\n      await conn.rollback();\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // myinfo 출력\n\n\n  async selectMif(uid) {\n    let conn = null;\n    let rowData = null;\n    let params = [uid, uid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.selectMif, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // mypage 남긴글 수\n\n\n  async history(writer) {\n    let conn = null;\n    let rowData = null;\n    let params = [writer];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.history, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData.map(row => {\n      return {\n        cnt: row.cnt.toString()\n      };\n    });\n  } // modify 출력\n\n\n  async selectMdf(uid) {\n    let conn = null;\n    let rowData = null;\n    let params = [uid, uid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.selectMdf, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 회원정보 수정\n\n\n  async updateInfo(uid, userid, passwd, name, email, phone_number, birth_date, gender, agree_to_privacy_policy, agree_to_advertising_info) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid, passwd, name, email, phone_number, birth_date, gender, agree_to_privacy_policy, agree_to_advertising_info, uid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.updateInfo, params);\n      await conn.commit();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 회원가입\n\n\n  async join(userid, passwd, name, email, phone_number, birth_date, gender, agree_to_privacy_policy, agree_to_advertising_info) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid, passwd, name, email, phone_number, birth_date, gender, agree_to_privacy_policy, agree_to_advertising_info];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.join, params);\n      await conn.commit();\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 아이디 중복체크\n\n\n  async isOverlapUid(userid) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.isOverlapUid, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } // 이메일 중복체크\n\n\n  async isOverlapEmail(userid) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.isOverlapEmail, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } //회원 가입여부 확인\n\n\n  async idCheck(userid) {\n    let conn = null;\n    let rowData = null;\n    let params = [userid];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.idcheck, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } //소셜회원 가입 \n\n\n  async socialJoin(userid, name, email) {\n    let conn = null;\n    let rowData = 1;\n    let params = [userid, name, email];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.socialJoin, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } //스코어 추가 \n\n\n  async setScore(facility, score) {\n    let conn = null;\n    let rowData = 1;\n    let params = [facility, score];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      await conn.query(_SQLs.default.member.setScore, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  } //스코어 조회\n\n\n  async getScore(facility) {\n    let conn = null;\n    let rowData = null;\n    let params = [facility];\n\n    try {\n      conn = await _MariaDB.default.makeConn();\n      rowData = await conn.query(_SQLs.default.member.getScore, params);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      await _MariaDB.default.closeConn();\n    }\n\n    return rowData;\n  }\n\n}\n\nmodule.exports = Member;","map":null,"metadata":{},"sourceType":"script"}