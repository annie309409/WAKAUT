{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\\\uD559\\uC5B8\\\\WAKAUT\\\\WAKAUT\\\\next\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Container, Form, FormSelect } from \"react-bootstrap\";\nimport List from \"../components/list\";\nimport { useEffect, useState } from \"react\";\nimport { AiTwotoneHeart } from \"react-icons/ai\";\nimport PlaceModal from \"./place_modal\";\nimport img from '../assets/workaut.png';\nimport mapicon from '../assets/map-icon.png';\nimport getLayout from \"../components/layouts/getLayout\";\nimport Modal from \"../components/modal\";\nimport { Datas } from \"../components/feutils\";\nimport { handleFacilityChange, handleSearchButtonClick, handleSearchTextChange, handleShowAll, handleSigunChange } from \"../models/Utils\";\nimport dynamic from 'next/dynamic';\nimport { getSession } from \"next-auth/client\";\nconst Map = dynamic(() => import(\"react-kakao-maps-sdk\").then(module => module.Map), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-kakao-maps-sdk\")],\n    modules: [\"index.js -> \" + \"react-kakao-maps-sdk\"]\n  }\n});\nconst MapMarker = dynamic(() => import(\"react-kakao-maps-sdk\").then(module => module.MapMarker), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-kakao-maps-sdk\")],\n    modules: [\"index.js -> \" + \"react-kakao-maps-sdk\"]\n  }\n});\nexport async function getServerSideProps(ctx) {\n  var _session$user;\n\n  // 세션 객체 가져오기\n  const session = await getSession(ctx); // 로그인한 사용자의 아이디\n\n  let sessionUserid = (session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.userid) || null;\n  const word = ctx.query.word || '';\n  let items = await Datas('/main', `srch=${word}`);\n  let fList = await Datas('/member/favorites', `userid=${sessionUserid}`);\n  return {\n    props: {\n      items: items,\n      word: word,\n      sessionUserid,\n      fList\n    }\n  };\n}\nexport default function Index({\n  items,\n  word,\n  sessionUserid,\n  fList\n}) {\n  let des = '#에어로빅 #줌바 #조깅';\n  const {\n    0: lgShow,\n    1: setLgShow\n  } = useState(false);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    0: selectedSigun,\n    1: setSelectedSigun\n  } = useState(\"\");\n  const {\n    0: selectedFacility,\n    1: setSelectedFacility\n  } = useState(\"\");\n  const {\n    0: searchText,\n    1: setSearchText\n  } = useState(\"\");\n  const {\n    0: searchResults,\n    1: setSearchResults\n  } = useState(items); // 검색결과 저장 state\n\n  const {\n    0: selectedPlace,\n    1: setSelectedPlace\n  } = useState(null); // 마커 클릭시 모달 state\n\n  const {\n    0: searchCount,\n    1: setSearchCount\n  } = useState(items.length); // 총 몇개의 시설이 조회된건지 저장하는 state\n\n  const {\n    0: isButtonActive,\n    1: setIsButtonActive\n  } = useState(false);\n  const {\n    0: bdList,\n    1: setBDLists\n  } = useState({});\n  const {\n    0: score,\n    1: setScore\n  } = useState({}); // 즐겨찾기 추가 추적 state\n\n  const {\n    0: favoriteAdded,\n    1: setFavoriteAdded\n  } = useState(false); // List 컴포넌트 상태관리 state\n\n  const {\n    0: listData,\n    1: setListData\n  } = useState([]);\n  useEffect(() => {\n    const updateListData = async () => {\n      const fetchedFList = await Datas('/member/favorites', `userid=${sessionUserid}`); // 여기에서 새로운 데이터를 listData에 업데이트\n\n      const updatedListData = searchResults.map(item => {\n        const isFavorited = fetchedFList.some(facility => facility.facility === item.FACLT_NM);\n        return _objectSpread(_objectSpread({}, item), {}, {\n          isFavorited\n        });\n      });\n      setListData(updatedListData);\n    };\n\n    updateListData();\n  }, [favoriteAdded, searchResults]);\n\n  const onFavoriteAdd = () => {\n    setFavoriteAdded(!favoriteAdded); // location.href=\"/\"\n  }; // 시군명 선택 시 시설구분명 셀렉트 태그에 표시할 options 배열 반환\n\n\n  function getFacilityOptions(sigun) {\n    const facilities = items.filter(item => item.SIGUN_NM === sigun);\n    const facilityNames = [...new Set(facilities.map(item => item.FACLT_DIV_NM))];\n    return facilityNames.map(name => __jsx(\"option\", {\n      key: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 44\n      }\n    }, name));\n  }\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    center: {\n      lat: 37.28892227326957,\n      lng: 127.05363481102465\n    },\n    errMsg: null,\n    isLoading: true\n  }); // useEffect는 최초 렌더링 이후에 실행\n  // useEffect의 첫 번째 인자로 전달한 함수는 컴포넌트가 마운트된 이후에 한번 실행되며,\n  // 두 번째 인자로 전달한 배열에 지정한 값이 변경되었을 때에도 실행\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(position => {\n        setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          center: {\n            lat: position.coords.latitude,\n            // 위도\n            lng: position.coords.longitude // 경도\n\n          },\n          isLoading: false\n        }));\n      }, err => {\n        setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        errMsg: \"geolocation을 사용할수 없어요..\",\n        isLoading: false\n      }));\n    }\n  }, []); // 게시글 목록 가지고 오기\n\n  async function lists(fcname) {\n    let boards = await Datas('/board/boardlist', `pg=5&fcname=${fcname}`).then(r => r);\n    setBDLists(await boards);\n  } //별점 가져오기 \n\n\n  const getScore = async fac => {\n    let sc = await Datas('/member/addscore', `facility=${fac}`);\n    setScore(await sc); // console.log('별점'+await sc);\n  };\n\n  return __jsx(Container, {\n    className: \"d-flex mt-4 mb-4 index\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"left col-6 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, \"\\uCD1D \", searchCount, \"\\uAC74\"), listData.map((item, idx) => __jsx(List, {\n    key: idx,\n    title: item.FACLT_NM,\n    malcnt: __jsx(AiTwotoneHeart, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 33\n      }\n    }),\n    note: item.REFINE_ROADNM_ADDR,\n    col: item.isFavorited ? \"bg-danger\" : \"bg-secondary\",\n    textClick: () => {\n      setSelectedPlace(item);\n      const lat = parseFloat(item.REFINE_WGS84_LAT);\n      const lng = parseFloat(item.REFINE_WGS84_LOGT);\n      setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        center: {\n          lat,\n          lng\n        }\n      }));\n      lists(item.FACLT_NM).then(getScore.FACLT_NM).then(setLgShow(true));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }))), __jsx(\"div\", {\n    className: \"right col-6 ms-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, word ? __jsx(Button, {\n    className: \"showAll-btn mb-2\",\n    variant: \"outline-success\",\n    onClick: handleShowAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 25\n    }\n  }, \"\\uC804\\uCCB4 \\uC2DC\\uC124\\uBCF4\\uAE30\") : false, __jsx(Form, {\n    className: \"d-flex mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, __jsx(FormSelect, {\n    value: selectedSigun,\n    onChange: e => handleSigunChange(e, setSelectedSigun, setSelectedFacility, setSearchText, items, setState, setSearchResults, setSearchCount),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 25\n    }\n  }, \"\\uC2DC\\uAD70\"), [...new Set(items.map(item => item.SIGUN_NM))].map(sigun => __jsx(\"option\", {\n    key: sigun,\n    value: sigun,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 33\n    }\n  }, sigun))), selectedSigun ? __jsx(FormSelect, {\n    value: selectedFacility,\n    onChange: e => handleFacilityChange(e, setSelectedFacility),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 25\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 29\n    }\n  }, \"\\uC2DC\\uC124\\uAD6C\\uBD84\\uBA85\"), getFacilityOptions(selectedSigun)) : __jsx(FormSelect, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 25\n    }\n  }, __jsx(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 29\n    }\n  }, \"\\uC2DC\\uC124\\uAD6C\\uBD84\\uBA85\")), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"\\uC5B4\\uB514\\uC11C \\uC6B4\\uB3D9\\uD560\\uAE4C\\uC694?\",\n    value: searchText,\n    onChange: e => handleSearchTextChange(e, setSearchText, setSearchResults, setSearchCount, setIsButtonActive),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  }), __jsx(Button, {\n    className: \"facility-btn\",\n    variant: \"outline-success\",\n    active: isButtonActive,\n    onClick: () => handleSearchButtonClick(items, selectedSigun, selectedFacility, searchText, setShow, setSearchResults, setSearchCount),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  }, \"Search\")), __jsx(Map, {\n    center: state.center,\n    style: {\n      width: \"100%\",\n      height: \"800px\"\n    },\n    level: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, (!state.isLoading ? searchResults : []).map(item => __jsx(MapMarker, {\n    key: item.FACLT_NM,\n    position: {\n      lat: item.REFINE_WGS84_LAT,\n      lng: item.REFINE_WGS84_LOGT\n    },\n    onClick: () => {\n      setSelectedPlace(item);\n      setLgShow(true);\n    },\n    image: {\n      src: `${mapicon}`,\n      size: {\n        width: 30,\n        height: 30\n      },\n      options: {\n        offset: {\n          x: 27,\n          y: 69\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 21\n    }\n  })))), __jsx(PlaceModal, {\n    size: \"lg\",\n    lgShow: lgShow,\n    setLgShow: setLgShow,\n    score: score,\n    title: selectedPlace ? selectedPlace.FACLT_NM : \"\",\n    addr: selectedPlace ? selectedPlace.REFINE_ROADNM_ADDR : \"\",\n    contact: selectedPlace ? selectedPlace.CONTCT_NO : \"\",\n    des: des,\n    img: img,\n    lat: selectedPlace ? selectedPlace.REFINE_WGS84_LAT : null,\n    lng: selectedPlace ? selectedPlace.REFINE_WGS84_LOGT : null,\n    bdList: bdList,\n    userid: sessionUserid,\n    onFavoriteAdd: onFavoriteAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }), __jsx(Modal, {\n    title: \"\\uC54C\\uB9BC\",\n    class: \"searchModal\",\n    size: \"sm\",\n    lgShow: show,\n    setLgShow: setShow,\n    children: \"\\uD574\\uB2F9\\uD558\\uB294 \\uC2DC\\uC124\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }\n  }));\n}\ngetLayout(Index, {\n  title: '주변에서 운동해요! WAKAUT!',\n  description: '신개념 운동 플랫폼 워크아웃!'\n});","map":{"version":3,"sources":["C:/Users/pc/Desktop/학언/WAKAUT/WAKAUT/next/pages/index.js"],"names":["Button","Container","Form","FormSelect","List","useEffect","useState","AiTwotoneHeart","PlaceModal","img","mapicon","getLayout","Modal","Datas","handleFacilityChange","handleSearchButtonClick","handleSearchTextChange","handleShowAll","handleSigunChange","dynamic","getSession","Map","then","module","ssr","MapMarker","getServerSideProps","ctx","session","sessionUserid","user","userid","word","query","items","fList","props","Index","des","lgShow","setLgShow","show","setShow","selectedSigun","setSelectedSigun","selectedFacility","setSelectedFacility","searchText","setSearchText","searchResults","setSearchResults","selectedPlace","setSelectedPlace","searchCount","setSearchCount","length","isButtonActive","setIsButtonActive","bdList","setBDLists","score","setScore","favoriteAdded","setFavoriteAdded","listData","setListData","updateListData","fetchedFList","updatedListData","map","item","isFavorited","some","facility","FACLT_NM","onFavoriteAdd","getFacilityOptions","sigun","facilities","filter","SIGUN_NM","facilityNames","Set","FACLT_DIV_NM","name","state","setState","center","lat","lng","errMsg","isLoading","navigator","geolocation","getCurrentPosition","position","prev","coords","latitude","longitude","err","message","lists","fcname","boards","r","getScore","fac","sc","idx","REFINE_ROADNM_ADDR","parseFloat","REFINE_WGS84_LAT","REFINE_WGS84_LOGT","e","width","height","src","size","options","offset","x","y","CONTCT_NO","title","description"],"mappings":"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","sourcesContent":["import {Button, Container, Form, FormSelect} from \"react-bootstrap\";\r\nimport List from \"../components/list\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { AiTwotoneHeart } from \"react-icons/ai\";\r\nimport PlaceModal from \"./place_modal\";\r\nimport img from '../assets/workaut.png';\r\nimport mapicon from '../assets/map-icon.png';\r\nimport getLayout from \"../components/layouts/getLayout\";\r\nimport Modal from \"../components/modal\";\r\nimport {Datas} from \"../components/feutils\";\r\nimport {\r\n    handleFacilityChange,\r\n    handleSearchButtonClick,\r\n    handleSearchTextChange,\r\n    handleShowAll,\r\n    handleSigunChange\r\n} from \"../models/Utils\";\r\n\r\nimport dynamic from 'next/dynamic';\r\nimport {getSession} from \"next-auth/client\";\r\n\r\n\r\nconst Map = dynamic(() => import(\"react-kakao-maps-sdk\").then((module) => module.Map), {\r\n    ssr: false\r\n});\r\nconst MapMarker = dynamic(() => import(\"react-kakao-maps-sdk\").then((module) => module.MapMarker), {\r\n    ssr: false\r\n});\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    // 세션 객체 가져오기\r\n    const session = await getSession(ctx);\r\n\r\n    // 로그인한 사용자의 아이디\r\n    let sessionUserid = session?.user?.userid || null;\r\n\r\n    const word = ctx.query.word || '';\r\n    let items = await Datas('/main', `srch=${word}`);\r\n    let fList = await Datas('/member/favorites', `userid=${sessionUserid}`);\r\n    return {props: {items: items, word: word, sessionUserid, fList}}\r\n}\r\n\r\nexport default function Index({items, word, sessionUserid, fList}) {\r\n    let des = '#에어로빅 #줌바 #조깅';\r\n\r\n    const [lgShow, setLgShow] = useState(false);\r\n    const [show, setShow] = useState(false);\r\n    const [selectedSigun, setSelectedSigun] = useState(\"\");\r\n    const [selectedFacility, setSelectedFacility] = useState(\"\");\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState(items);  // 검색결과 저장 state\r\n    const [selectedPlace, setSelectedPlace] = useState(null);   // 마커 클릭시 모달 state\r\n    const [searchCount, setSearchCount] = useState(items.length);  // 총 몇개의 시설이 조회된건지 저장하는 state\r\n    const [isButtonActive, setIsButtonActive] = useState(false);\r\n    const [bdList, setBDLists] = useState({});\r\n    const [score, setScore] = useState({});\r\n\r\n    // 즐겨찾기 추가 추적 state\r\n    const [favoriteAdded, setFavoriteAdded] = useState(false);\r\n    // List 컴포넌트 상태관리 state\r\n    const [listData, setListData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const updateListData = async () => {\r\n            const fetchedFList = await Datas('/member/favorites', `userid=${sessionUserid}`);\r\n            // 여기에서 새로운 데이터를 listData에 업데이트\r\n            const updatedListData = searchResults.map((item) => {\r\n                const isFavorited = fetchedFList.some((facility) => facility.facility === item.FACLT_NM);\r\n                return { ...item, isFavorited };\r\n            });\r\n            setListData(updatedListData);\r\n        };\r\n\r\n        updateListData();\r\n    }, [favoriteAdded, searchResults]);\r\n\r\n    const onFavoriteAdd = () => {\r\n        setFavoriteAdded(!favoriteAdded);\r\n        // location.href=\"/\"\r\n    };\r\n\r\n    // 시군명 선택 시 시설구분명 셀렉트 태그에 표시할 options 배열 반환\r\n    function getFacilityOptions(sigun) {\r\n        const facilities = items.filter((item) => item.SIGUN_NM === sigun);\r\n        const facilityNames = [...new Set(facilities.map((item) => item.FACLT_DIV_NM))];\r\n        return facilityNames.map((name) => <option key={name}>{name}</option>);\r\n    }\r\n\r\n\r\n    const [state, setState] = useState({\r\n        center: {\r\n            lat: 37.28892227326957,\r\n            lng: 127.05363481102465,\r\n        },\r\n        errMsg: null,\r\n        isLoading: true,\r\n    })\r\n\r\n    // useEffect는 최초 렌더링 이후에 실행\r\n    // useEffect의 첫 번째 인자로 전달한 함수는 컴포넌트가 마운트된 이후에 한번 실행되며,\r\n    // 두 번째 인자로 전달한 배열에 지정한 값이 변경되었을 때에도 실행\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            // GeoLocation을 이용해서 접속 위치를 얻어옵니다\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setState((prev) => ({\r\n                        ...prev,\r\n                        center: {\r\n                            lat: position.coords.latitude, // 위도\r\n                            lng: position.coords.longitude, // 경도\r\n                        },\r\n                        isLoading: false,\r\n                    }))\r\n                },\r\n                (err) => {\r\n                    setState((prev) => ({\r\n                        ...prev,\r\n                        errMsg: err.message,\r\n                        isLoading: false,\r\n                    }))\r\n                }\r\n            )\r\n        } else {\r\n            // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\r\n            setState((prev) => ({\r\n                ...prev,\r\n                errMsg: \"geolocation을 사용할수 없어요..\",\r\n                isLoading: false,\r\n            }))\r\n        }\r\n    }, [])\r\n\r\n    // 게시글 목록 가지고 오기\r\n    async function lists(fcname){\r\n        let boards = await Datas('/board/boardlist',`pg=5&fcname=${fcname}`).then(r=>r);\r\n        setBDLists(await boards);\r\n    }\r\n   //별점 가져오기 \r\n    const getScore = async (fac)=>{\r\n        let sc= await Datas('/member/addscore', `facility=${fac}`);\r\n        setScore(await sc);\r\n        // console.log('별점'+await sc);\r\n    }\r\n\r\n    return(\r\n        <Container className=\"d-flex mt-4 mb-4 index\">\r\n            <div className=\"left col-6 \">\r\n                <p>총 {searchCount}건</p>\r\n                {listData.map((item,idx) => (\r\n                    <List\r\n                        key={idx}\r\n                        title={item.FACLT_NM}\r\n                        malcnt={<AiTwotoneHeart />}\r\n                        note={item.REFINE_ROADNM_ADDR}\r\n                        col={item.isFavorited ? \"bg-danger\" : \"bg-secondary\"}\r\n                        textClick={() => {\r\n                            setSelectedPlace(item);\r\n                            const lat = parseFloat(item.REFINE_WGS84_LAT);\r\n                            const lng = parseFloat(item.REFINE_WGS84_LOGT);\r\n                            setState((prev) => ({\r\n                                ...prev,\r\n                                center: { lat, lng },\r\n                            }));\r\n                            lists(item.FACLT_NM).then(getScore.FACLT_NM).then(setLgShow(true))\r\n                        }}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"right col-6 ms-4\">\r\n                {word ? <Button className=\"showAll-btn mb-2\" variant=\"outline-success\" onClick={handleShowAll}>전체 시설보기</Button> : false}\r\n                <Form className=\"d-flex mb-2\">\r\n                    <FormSelect value={selectedSigun}\r\n                                onChange={e => handleSigunChange(\r\n                                    e,\r\n                                    setSelectedSigun,\r\n                                    setSelectedFacility,\r\n                                    setSearchText,\r\n                                    items,\r\n                                    setState,\r\n                                    setSearchResults,\r\n                                    setSearchCount)\r\n                                }>\r\n                        <option value=\"\">시군</option>\r\n                        {/* API에서 불러오는 데이터중 시군 데이터로 새로운 배열을 생성하되 중복을 제거함 */}\r\n                        {\r\n                            [...new Set(items.map((item) => item.SIGUN_NM))].map((sigun) => (\r\n                                <option key={sigun} value={sigun}>{sigun}</option>\r\n                            ))\r\n                        }\r\n                    </FormSelect>\r\n                    {selectedSigun\r\n                        ?\r\n                        <FormSelect value={selectedFacility} onChange={e => handleFacilityChange(e, setSelectedFacility)}>\r\n                            <option value=\"\">시설구분명</option>\r\n                            {getFacilityOptions(selectedSigun)}\r\n                        </FormSelect>\r\n                        :\r\n                        <FormSelect >\r\n                            <option>시설구분명</option>\r\n                        </FormSelect>\r\n                    }\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"어디서 운동할까요?\"\r\n                        value={searchText}\r\n                        onChange={e => handleSearchTextChange(e, setSearchText, setSearchResults, setSearchCount, setIsButtonActive)}\r\n                    />\r\n                    <Button className=\"facility-btn\" variant=\"outline-success\"\r\n                            active={isButtonActive}\r\n                            onClick={() => handleSearchButtonClick(\r\n                                items,\r\n                                selectedSigun,\r\n                                selectedFacility,\r\n                                searchText,\r\n                                setShow,\r\n                                setSearchResults,\r\n                                setSearchCount,\r\n                            )}>Search</Button>\r\n                </Form>\r\n\r\n            <Map center={state.center} style={{ width: \"100%\", height: \"800px\" }}  level={3}>\r\n                {(!state.isLoading ? searchResults : []).map((item) => (\r\n                    <MapMarker\r\n                        key={item.FACLT_NM}\r\n                        position={{ lat: item.REFINE_WGS84_LAT, lng: item.REFINE_WGS84_LOGT }}\r\n                        onClick={() => {\r\n                            setSelectedPlace(item);\r\n                            setLgShow(true);\r\n                        }}\r\n                        image={{\r\n                            src: `${mapicon}`,\r\n                            size: {width: 30, height: 30,},\r\n                            options: {\r\n                             offset: {x: 27, y: 69,},\r\n                        },\r\n                        }}\r\n                    />\r\n                ))}\r\n            </Map>\r\n            </div>\r\n            <PlaceModal\r\n                size=\"lg\"\r\n                lgShow={lgShow}\r\n                setLgShow={setLgShow}\r\n                score={score}\r\n                title={selectedPlace ? selectedPlace.FACLT_NM : \"\"}\r\n                addr={selectedPlace ? selectedPlace.REFINE_ROADNM_ADDR : \"\"}\r\n                contact={selectedPlace ? selectedPlace.CONTCT_NO : \"\"}\r\n                des={des}\r\n                img={img}\r\n                lat={selectedPlace ? selectedPlace.REFINE_WGS84_LAT : null}\r\n                lng={selectedPlace ? selectedPlace.REFINE_WGS84_LOGT : null}\r\n                bdList={bdList}\r\n                userid={sessionUserid}\r\n                onFavoriteAdd={onFavoriteAdd}\r\n            />\r\n            <Modal title=\"알림\" class=\"searchModal\" size=\"sm\" lgShow={show} setLgShow={setShow}  children=\"해당하는 시설이 없습니다.\"/>\r\n        </Container>\r\n    )\r\n}\r\n\r\ngetLayout(Index,{title:'주변에서 운동해요! WAKAUT!',description:'신개념 운동 플랫폼 워크아웃!'})\r\n"]},"metadata":{},"sourceType":"module"}