{"ast":null,"code":"// npm install next-auth@3.29.10 --save-dev\nimport NextAuth from \"next-auth\";\nimport Credentials from 'next-auth/providers/credentials';\nimport axios from \"axios\";\nexport default NextAuth({\n  providers: [Credentials({\n    id: \"userid-passwd-credentials\",\n    name: \"userid-passwd-credentials\",\n    credentials: {\n      userid: {\n        label: \"아이디\",\n        type: \"text\"\n      },\n      passwd: {\n        label: \"비밀번호\",\n        type: \"password\"\n      }\n    },\n\n    // 로그인 폼 정의\n    async authorize(credentials, req) {\n      const userid = credentials.userid;\n      const passwd = credentials.passwd; // 인증 확인\n\n      let params = [userid, passwd];\n      let url = `http://localhost:3000/api/users/login?userid=${params[0]}&passwd=${params[1]}`;\n      const res = await axios.get(url);\n      const result = await res.data;\n      console.log('next-auth', (await result)[0].uid); // 인증 성공시 반환\n\n      if ((await result)[0].uid > 0) {\n        return credentials;\n      }\n    }\n\n  })],\n  pages: {\n    // 인증에 사용자 정의 로그인 페이지 사용\n    signIn: '/member/login'\n  },\n  callbacks: {\n    async jwt(token, user, account, profile, isNewUser) {\n      if (user !== null && user !== void 0 && user.userid) token.userid = user.userid;\n      console.log('jwt', user);\n      return token;\n    },\n\n    async session(session, userOrToken) {\n      session.user.userid = userOrToken.userid;\n      return session;\n    }\n\n  }\n});","map":{"version":3,"sources":["C:/Users/fullstack/Desktop/TeamWorks/WAKAUT/next/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Credentials","axios","providers","id","name","credentials","userid","label","type","passwd","authorize","req","params","url","res","get","result","data","console","log","uid","pages","signIn","callbacks","jwt","token","user","account","profile","isNewUser","session","userOrToken"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAeF,QAAQ,CAAC;AACpBG,EAAAA,SAAS,EAAE,CACPF,WAAW,CAAC;AACRG,IAAAA,EAAE,EAAE,2BADI;AAERC,IAAAA,IAAI,EAAE,2BAFE;AAGRC,IAAAA,WAAW,EAAE;AACTC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,EAAE,KAAT;AAAgBC,QAAAA,IAAI,EAAE;AAAtB,OADC;AAETC,MAAAA,MAAM,EAAE;AAAEF,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,IAAI,EAAE;AAAvB;AAFC,KAHL;;AAML;AACH,UAAME,SAAN,CAAgBL,WAAhB,EAA6BM,GAA7B,EAAkC;AAC9B,YAAML,MAAM,GAAGD,WAAW,CAACC,MAA3B;AACA,YAAMG,MAAM,GAAGJ,WAAW,CAACI,MAA3B,CAF8B,CAG9B;;AACA,UAAIG,MAAM,GAAG,CAACN,MAAD,EAAQG,MAAR,CAAb;AACA,UAAII,GAAG,GAAG,gDAA+CD,MAAM,CAAC,CAAD,CAAI,WAAUA,MAAM,CAAC,CAAD,CAAI,EAAvF;AACA,YAAME,GAAG,GAAE,MAAMb,KAAK,CAACc,GAAN,CAAUF,GAAV,CAAjB;AACA,YAAMG,MAAM,GAAI,MAAMF,GAAG,CAACG,IAA1B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwB,CAAC,MAAMH,MAAP,EAAe,CAAf,EAAkBI,GAA1C,EAR8B,CAS9B;;AACA,UAAG,CAAC,MAAMJ,MAAP,EAAe,CAAf,EAAkBI,GAAlB,GAAwB,CAA3B,EAA6B;AACzB,eAAOf,WAAP;AACH;AAEJ;;AArBO,GAAD,CADJ,CADS;AA0BpBgB,EAAAA,KAAK,EAAE;AAAE;AACLC,IAAAA,MAAM,EAAE;AADL,GA1Ba;AA6BpBC,EAAAA,SAAS,EAAE;AACP,UAAMC,GAAN,CAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,OAAhC,EAAyCC,SAAzC,EAAoD;AAChD,UAAIH,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEpB,MAAV,EAAkBmB,KAAK,CAACnB,MAAN,GAAeoB,IAAI,CAACpB,MAApB;AAClBY,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBO,IAAlB;AACA,aAAOD,KAAP;AACH,KALM;;AAOP,UAAMK,OAAN,CAAcA,OAAd,EAAuBC,WAAvB,EAAoC;AAChCD,MAAAA,OAAO,CAACJ,IAAR,CAAapB,MAAb,GAAsByB,WAAW,CAACzB,MAAlC;AACA,aAAOwB,OAAP;AACH;;AAVM;AA7BS,CAAD,CAAvB","sourcesContent":["// npm install next-auth@3.29.10 --save-dev\r\nimport NextAuth from \"next-auth\";\r\nimport Credentials from 'next-auth/providers/credentials';\r\nimport axios from \"axios\";\r\n\r\nexport default NextAuth({\r\n    providers: [\r\n        Credentials({\r\n            id: \"userid-passwd-credentials\",\r\n            name: \"userid-passwd-credentials\",\r\n            credentials: {\r\n                userid: { label: \"아이디\", type: \"text\" },\r\n                passwd: { label: \"비밀번호\", type: \"password\" }\r\n            }, // 로그인 폼 정의\r\n            async authorize(credentials, req) {\r\n                const userid = credentials.userid;\r\n                const passwd = credentials.passwd;\r\n                // 인증 확인\r\n                let params = [userid,passwd];\r\n                let url =`http://localhost:3000/api/users/login?userid=${params[0]}&passwd=${params[1]}`;\r\n                const res= await axios.get(url);\r\n                const result  = await res.data;\r\n                console.log('next-auth',(await result)[0].uid);\r\n                // 인증 성공시 반환\r\n                if((await result)[0].uid > 0){\r\n                    return credentials;\r\n                }\r\n\r\n            }\r\n        })\r\n    ],\r\n    pages: { // 인증에 사용자 정의 로그인 페이지 사용\r\n        signIn: '/member/login'\r\n    },\r\n    callbacks: {\r\n        async jwt(token, user, account, profile, isNewUser) {\r\n            if (user?.userid) token.userid = user.userid;\r\n            console.log('jwt',user)\r\n            return token;\r\n        },\r\n\r\n        async session(session, userOrToken) {\r\n            session.user.userid = userOrToken.userid;\r\n            return session;\r\n        }\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}