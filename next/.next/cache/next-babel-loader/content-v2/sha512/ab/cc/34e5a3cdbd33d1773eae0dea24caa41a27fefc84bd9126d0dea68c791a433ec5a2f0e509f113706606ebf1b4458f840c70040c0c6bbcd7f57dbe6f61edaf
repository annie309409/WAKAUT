{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fullstack\\\\Desktop\\\\TeamWorks\\\\WAKAUT\\\\next\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport '../styles/globals.css';\nimport '../styles/boot-added.css';\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport App from \"next/app\";\nimport { getSession } from \"next-auth/client\";\nimport Loading from '../components/loading';\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  var _Component$getLayout;\n\n  const router = useRouter();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    router.events.on(\"routeChangeStart\", () => {\n      setLoading(true);\n    });\n    router.events.on(\"routeChangeComplete\", () => {\n      setLoading(false);\n    });\n  }, [router]);\n  const getLayout = (_Component$getLayout = Component.getLayout) !== null && _Component$getLayout !== void 0 ? _Component$getLayout : page => page;\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, loading && __jsx(Loading, {\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 19\n    }\n  }), console.log(pageProps0), getLayout(__jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 20\n    }\n  }))));\n}\n\nMyApp.getInitialProps = async ctx => {\n  // next app의 기본 props객체 초기화\n  //application단위의 전역변수\n  const appProps = await App.getInitialProps(ctx);\n  const sess = await getSession(ctx);\n  console.log('전체:', sess.user.userid);\n  appProps.sess = sess;\n  return _objectSpread({}, appProps);\n};\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/fullstack/Desktop/TeamWorks/WAKAUT/next/pages/_app.js"],"names":["React","useState","useEffect","useRouter","App","getSession","Loading","MyApp","Component","pageProps","router","loading","setLoading","events","on","getLayout","page","console","log","pageProps0","getInitialProps","ctx","appProps","sess","user","userid"],"mappings":";;;;;;;;;;;AAAA,OAAO,uBAAP;AACA,OAAO,0BAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AAAA;;AACvC,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAM;AAAA,OAACQ,OAAD;AAAA,OAASC;AAAT,MAAuBX,QAAQ,CAAC,KAAD,CAArC;AACAC,EAAAA,SAAS,CAAC,MAAI;AACZQ,IAAAA,MAAM,CAACG,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqC,MAAM;AACzCF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAFD;AAGAF,IAAAA,MAAM,CAACG,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwC,MAAM;AAC5CF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAFD;AAGD,GAPQ,EAOP,CAACF,MAAD,CAPO,CAAT;AAQA,QAAMK,SAAS,2BAAIP,SAAS,CAACO,SAAd,uEAA6BC,IAAD,IAAQA,IAAnD;AACA,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,OAAO,IAAI,MAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADd,EAEGM,OAAO,CAACC,GAAR,CAAYC,UAAZ,CAFH,EAGIJ,SAAS,CAAE,MAAC,SAAD,eAAeN,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF,CAHb,CADF;AAOD;;AAEDF,KAAK,CAACa,eAAN,GAAwB,MAAOC,GAAP,IAAa;AACnC;AACA;AACA,QAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACgB,eAAJ,CAAoBC,GAApB,CAAvB;AACA,QAAME,IAAI,GAAE,MAAMlB,UAAU,CAACgB,GAAD,CAA5B;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBK,IAAI,CAACC,IAAL,CAAUC,MAA5B;AACAH,EAAAA,QAAQ,CAACC,IAAT,GAAgBA,IAAhB;AACA,2BAAWD,QAAX;AACD,CARD;;AASA,eAAef,KAAf","sourcesContent":["import '../styles/globals.css';\r\nimport '../styles/boot-added.css';\r\nimport React from \"react\";\r\nimport { useState,useEffect } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport App from \"next/app\";\r\nimport {getSession} from \"next-auth/client\";\r\nimport Loading from '../components/loading';\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  const router = useRouter();\r\n  const [loading,setLoading] = useState(false);\r\n  useEffect(()=>{\r\n    router.events.on(\"routeChangeStart\", () => {\r\n      setLoading(true);\r\n    });\r\n    router.events.on(\"routeChangeComplete\", () => {\r\n      setLoading(false);\r\n    });\r\n  },[router])\r\n  const getLayout =  Component.getLayout ?? ((page)=>page);\r\n  return (\r\n    <React.Fragment>\r\n      {loading && <Loading loading={loading} />}\r\n      {console.log(pageProps0)}\r\n      { getLayout( <Component {...pageProps} /> )}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nMyApp.getInitialProps = async (ctx)=>{\r\n  // next app의 기본 props객체 초기화\r\n  //application단위의 전역변수\r\n  const appProps = await App.getInitialProps(ctx);\r\n  const sess =await getSession(ctx);\r\n  console.log('전체:',sess.user.userid);\r\n  appProps.sess = sess;\r\n  return {...appProps};\r\n}\r\nexport default MyApp\r\n"]},"metadata":{},"sourceType":"module"}