{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Container, Form, FormSelect } from \"react-bootstrap\";\nimport List from \"../components/list\";\nimport { useEffect, useState } from \"react\";\nimport { AiTwotoneHeart } from \"react-icons/ai\";\nimport PlaceModal from \"./place_modal\";\nimport img from '../assets/workaut.png';\nimport mapicon from '../assets/map-icon.png';\nimport getLayout from \"../components/layouts/getLayout\";\nimport Modal from \"../components/modal\";\nimport { Datas } from \"../components/feutils\";\nimport { handleFacilityChange, handleSearchButtonClick, handleSearchTextChange, handleShowAll, handleSigunChange } from \"../models/Utils\";\nimport dynamic from 'next/dynamic';\nimport { getSession } from \"next-auth/client\";\nconst Map = dynamic(() => import(\"react-kakao-maps-sdk\").then(module => module.Map), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-kakao-maps-sdk\")],\n    modules: [\"index.js -> \" + \"react-kakao-maps-sdk\"]\n  }\n});\nconst MapMarker = dynamic(() => import(\"react-kakao-maps-sdk\").then(module => module.MapMarker), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"react-kakao-maps-sdk\")],\n    modules: [\"index.js -> \" + \"react-kakao-maps-sdk\"]\n  }\n});\nexport async function getServerSideProps(ctx) {\n  var _session$user;\n\n  // 세션 객체 가져오기\n  const session = await getSession(ctx); // 로그인한 사용자의 아이디\n\n  let sessionUserid = (session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.userid) || null;\n  const word = ctx.query.word || '';\n  let items = await Datas('/main', `srch=${word}`);\n  let fList = await Datas('/member/favorites', `userid=${sessionUserid}`);\n  return {\n    props: {\n      items: items,\n      word: word,\n      sessionUserid,\n      fList\n    }\n  };\n}\nexport default function Index({\n  items,\n  word,\n  sessionUserid,\n  fList\n}) {\n  let des = '#에어로빅 #줌바 #조깅';\n  const {\n    0: lgShow,\n    1: setLgShow\n  } = useState(false);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    0: selectedSigun,\n    1: setSelectedSigun\n  } = useState(\"\");\n  const {\n    0: selectedFacility,\n    1: setSelectedFacility\n  } = useState(\"\");\n  const {\n    0: searchText,\n    1: setSearchText\n  } = useState(\"\");\n  const {\n    0: searchResults,\n    1: setSearchResults\n  } = useState(items); // 검색결과 저장 state\n\n  const {\n    0: selectedPlace,\n    1: setSelectedPlace\n  } = useState(null); // 마커 클릭시 모달 state\n\n  const {\n    0: searchCount,\n    1: setSearchCount\n  } = useState(items.length); // 총 몇개의 시설이 조회된건지 저장하는 state\n\n  const {\n    0: isButtonActive,\n    1: setIsButtonActive\n  } = useState(false);\n  const {\n    0: bdList,\n    1: setBDLists\n  } = useState({});\n  const {\n    0: peops,\n    1: setPeops\n  } = useState('');\n  const {\n    0: scs,\n    1: setScs\n  } = useState(''); // 즐겨찾기 추가 추적 state\n\n  const {\n    0: favoriteAdded,\n    1: setFavoriteAdded\n  } = useState(false); // List 컴포넌트 상태관리 state\n\n  const {\n    0: listData,\n    1: setListData\n  } = useState([]);\n  useEffect(() => {\n    const updateListData = async () => {\n      const fetchedFList = await Datas('/member/favorites', `userid=${sessionUserid}`); // 여기에서 새로운 데이터를 listData에 업데이트\n\n      const updatedListData = searchResults.map(item => {\n        const isFavorited = fetchedFList.some(facility => facility.facility === item.FACLT_NM);\n        return _objectSpread(_objectSpread({}, item), {}, {\n          isFavorited\n        });\n      });\n      setListData(updatedListData);\n    };\n\n    updateListData();\n  }, [favoriteAdded, searchResults]);\n\n  const onFavoriteAdd = () => {\n    setFavoriteAdded(!favoriteAdded); // location.href=\"/\"\n  }; // 시군명 선택 시 시설구분명 셀렉트 태그에 표시할 options 배열 반환\n\n\n  function getFacilityOptions(sigun) {\n    const facilities = items.filter(item => item.SIGUN_NM === sigun);\n    const facilityNames = [...new Set(facilities.map(item => item.FACLT_DIV_NM))];\n    return facilityNames.map(name => __jsx(\"option\", {\n      key: name\n    }, name));\n  }\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    center: {\n      lat: 37.28892227326957,\n      lng: 127.05363481102465\n    },\n    errMsg: null,\n    isLoading: true\n  }); // useEffect는 최초 렌더링 이후에 실행\n  // useEffect의 첫 번째 인자로 전달한 함수는 컴포넌트가 마운트된 이후에 한번 실행되며,\n  // 두 번째 인자로 전달한 배열에 지정한 값이 변경되었을 때에도 실행\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(position => {\n        setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          center: {\n            lat: position.coords.latitude,\n            // 위도\n            lng: position.coords.longitude // 경도\n\n          },\n          isLoading: false\n        }));\n      }, err => {\n        setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        errMsg: \"geolocation을 사용할수 없어요..\",\n        isLoading: false\n      }));\n    }\n  }, []); // 게시글 목록 가지고 오기\n\n  async function lists(fcname) {\n    let boards = await Datas('/board/boardlist', `pg=5&fcname=${fcname}`).then(r => r);\n    setBDLists(await boards);\n  } //별점 가져오기 \n\n\n  const getScore = async fac => {\n    let sc = await Datas('/member/addscore', `facility=${fac}`);\n    setPeops(await sc[0].cnt);\n    setScs(await sc[0].score);\n  };\n\n  return __jsx(Container, {\n    className: \"d-flex mt-4 mb-4 index\"\n  }, __jsx(\"div\", {\n    className: \"left col-6 \"\n  }, __jsx(\"p\", null, \"\\uCD1D \", searchCount, \"\\uAC74\"), listData.map((item, idx) => __jsx(List, {\n    key: idx,\n    title: item.FACLT_NM,\n    malcnt: __jsx(AiTwotoneHeart, null),\n    note: item.REFINE_ROADNM_ADDR,\n    col: item.isFavorited ? \"bg-danger\" : \"bg-secondary\",\n    textClick: () => {\n      setSelectedPlace(item);\n      const lat = parseFloat(item.REFINE_WGS84_LAT);\n      const lng = parseFloat(item.REFINE_WGS84_LOGT);\n      setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        center: {\n          lat,\n          lng\n        }\n      }));\n      lists(item.FACLT_NM).then(getScore(item.FACLT_NM)).then(setLgShow(true));\n    }\n  }))), __jsx(\"div\", {\n    className: \"right col-6 ms-4\"\n  }, word ? __jsx(Button, {\n    className: \"showAll-btn mb-2\",\n    variant: \"outline-success\",\n    onClick: handleShowAll\n  }, \"\\uC804\\uCCB4 \\uC2DC\\uC124\\uBCF4\\uAE30\") : false, __jsx(Form, {\n    className: \"d-flex mb-2\"\n  }, __jsx(FormSelect, {\n    value: selectedSigun,\n    onChange: e => handleSigunChange(e, setSelectedSigun, setSelectedFacility, setSearchText, items, setState, setSearchResults, setSearchCount)\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"\\uC2DC\\uAD70\"), [...new Set(items.map(item => item.SIGUN_NM))].map(sigun => __jsx(\"option\", {\n    key: sigun,\n    value: sigun\n  }, sigun))), selectedSigun ? __jsx(FormSelect, {\n    value: selectedFacility,\n    onChange: e => handleFacilityChange(e, setSelectedFacility)\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"\\uC2DC\\uC124\\uAD6C\\uBD84\\uBA85\"), getFacilityOptions(selectedSigun)) : __jsx(FormSelect, null, __jsx(\"option\", null, \"\\uC2DC\\uC124\\uAD6C\\uBD84\\uBA85\")), __jsx(Form.Control, {\n    type: \"text\",\n    placeholder: \"\\uC5B4\\uB514\\uC11C \\uC6B4\\uB3D9\\uD560\\uAE4C\\uC694?\",\n    value: searchText,\n    onChange: e => handleSearchTextChange(e, setSearchText, setSearchResults, setSearchCount, setIsButtonActive)\n  }), __jsx(Button, {\n    className: \"facility-btn\",\n    variant: \"outline-success\",\n    active: isButtonActive,\n    onClick: () => handleSearchButtonClick(items, selectedSigun, selectedFacility, searchText, setShow, setSearchResults, setSearchCount)\n  }, \"Search\")), __jsx(Map, {\n    center: state.center,\n    style: {\n      width: \"100%\",\n      height: \"800px\"\n    },\n    level: 3\n  }, (!state.isLoading ? searchResults : []).map(item => __jsx(MapMarker, {\n    key: item.FACLT_NM,\n    position: {\n      lat: item.REFINE_WGS84_LAT,\n      lng: item.REFINE_WGS84_LOGT\n    },\n    onClick: () => {\n      setSelectedPlace(item);\n      setLgShow(true);\n    },\n    image: {\n      src: `${mapicon}`,\n      size: {\n        width: 30,\n        height: 30\n      },\n      options: {\n        offset: {\n          x: 27,\n          y: 69\n        }\n      }\n    }\n  })))), __jsx(PlaceModal, {\n    size: \"lg\",\n    lgShow: lgShow,\n    setLgShow: setLgShow,\n    score: scs,\n    setScs: setScs,\n    peops: peops,\n    setPeops: setPeops,\n    title: selectedPlace ? selectedPlace.FACLT_NM : \"\",\n    addr: selectedPlace ? selectedPlace.REFINE_ROADNM_ADDR : \"\",\n    contact: selectedPlace ? selectedPlace.CONTCT_NO : \"\",\n    des: des,\n    img: img,\n    lat: selectedPlace ? selectedPlace.REFINE_WGS84_LAT : null,\n    lng: selectedPlace ? selectedPlace.REFINE_WGS84_LOGT : null,\n    bdList: bdList,\n    userid: sessionUserid,\n    onFavoriteAdd: onFavoriteAdd\n  }), __jsx(Modal, {\n    title: \"\\uC54C\\uB9BC\",\n    class: \"searchModal\",\n    size: \"sm\",\n    lgShow: show,\n    setLgShow: setShow,\n    children: \"\\uD574\\uB2F9\\uD558\\uB294 \\uC2DC\\uC124\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n  }));\n}\ngetLayout(Index, {\n  title: '주변에서 운동해요! WAKAUT!',\n  description: '신개념 운동 플랫폼 워크아웃!'\n});","map":null,"metadata":{},"sourceType":"module"}