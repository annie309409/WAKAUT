{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport '../styles/globals.css';\nimport '../styles/boot-added.css';\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport App from \"next/app\";\nimport { getSession } from \"next-auth/client\";\nimport Loading from '../components/loading';\n\nfunction MyApp({\n  Component,\n  pageProps,\n  session\n}) {\n  var _Component$getLayout;\n\n  const router = useRouter();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  pageProps.session = session.user;\n  useEffect(() => {\n    router.events.on(\"routeChangeStart\", () => {\n      setLoading(true);\n    });\n    router.events.on(\"routeChangeComplete\", () => {\n      setLoading(false);\n    });\n  }, [router]);\n  const getLayout = (_Component$getLayout = Component.getLayout) !== null && _Component$getLayout !== void 0 ? _Component$getLayout : page => page;\n  return __jsx(React.Fragment, null, loading && __jsx(Loading, {\n    loading: loading\n  }), getLayout(__jsx(Component, pageProps)));\n}\n\nMyApp.getInitialProps = async ctx => {\n  // next app의 기본 props객체 초기화\n  //application단위의 전역변수\n  const appProps = await App.getInitialProps(ctx);\n  let sess = await getSession(ctx);\n  appProps.session = await sess;\n  if (!sess) appProps.session = {\n    user: {\n      name: 'guest',\n      email: 'null',\n      image: null,\n      userid: 0\n    }\n  };\n  return _objectSpread({}, appProps);\n};\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}